tree 9ce317c336c5bd15ee74b73b53cad024c0da3e08
parent 3cc3f5c91f5a922b92da4a3fe6142e40caa32fc9
author Noa Aarts <noa@voorwaarts.nl> Fri Mar 14 20:54:17 2025 +0100
committer Noa Aarts <noa@voorwaarts.nl> Fri Mar 14 20:54:17 2025 +0100

remove fopens

diff --git a/libqalculate/Calculator-definitions.cc b/libqalculate/Calculator-definitions.cc
index 1eaec63..5b7fdc7 100644
--- a/libqalculate/Calculator-definitions.cc
+++ b/libqalculate/Calculator-definitions.cc
@@ -3189,259 +3189,14 @@ int Calculator::saveDataSets(const char* file_name, bool save_global) {
 }
 
 bool Calculator::importCSV(MathStructure &mstruct, const char *file_name, int first_row, string delimiter, vector<string> *headers) {
-	FILE *file = fopen(file_name, "r");
-	if(file == NULL) {
-		return false;
-	}
-	if(first_row < 1) {
-		first_row = 1;
-	}
-	char line[10000];
-	string stmp, str1, str2;
-	long int row = 0, rows = 1;
-	int columns = 1;
-	int column;
-	mstruct = m_empty_matrix;
-	size_t is, is_n;
-	bool v_added = false;
-	while(fgets(line, 10000, file)) {
-		row++;
-		if(row >= first_row) {
-			stmp = line;
-			remove_blank_ends(stmp);
-			if(row == first_row) {
-				if(stmp.empty()) {
-					row--;
-				} else {
-					is = 0;
-					while((is_n = stmp.find(delimiter, is)) != string::npos) {
-						columns++;
-						if(headers) {
-							str1 = stmp.substr(is, is_n - is);
-							remove_blank_ends(str1);
-							headers->push_back(str1);
-						}
-						is = is_n + delimiter.length();
-					}
-					if(headers) {
-						str1 = stmp.substr(is, stmp.length() - is);
-						remove_blank_ends(str1);
-						headers->push_back(str1);
-					}
-					mstruct.resizeMatrix(1, columns, m_undefined);
-					if(mstruct.rows() < 1 || mstruct.columns() < (size_t) columns) return false;
-				}
-			}
-			if((!headers || row > first_row) && !stmp.empty()) {
-				is = 0;
-				column = 1;
-				if(v_added) {
-					mstruct.addRow(m_undefined);
-					rows++;
-				}
-				while(column <= columns) {
-					is_n = stmp.find(delimiter, is);
-					if(is_n == string::npos) {
-						str1 = stmp.substr(is, stmp.length() - is);
-					} else {
-						str1 = stmp.substr(is, is_n - is);
-						is = is_n + delimiter.length();
-					}
-					parse(&mstruct[rows - 1][column - 1], str1);
-					column++;
-					if(is_n == string::npos) {
-						break;
-					}
-				}
-				v_added = true;
-			}
-		}
-	}
-	return true;
+	return false;
 }
 
 bool Calculator::importCSV(const char *file_name, int first_row, bool headers, string delimiter, bool to_matrix, string name, string title, string category) {
-	FILE *file = fopen(file_name, "r");
-	if(file == NULL) {
-		return false;
-	}
-	if(first_row < 1) {
-		first_row = 1;
-	}
-	string filestr = file_name;
-	remove_blank_ends(filestr);
-	size_t i = filestr.find_last_of("/");
-	if(i != string::npos) {
-		filestr = filestr.substr(i + 1, filestr.length() - (i + 1));
-	}
-	remove_blank_ends(name);
-	if(name.empty()) {
-		name = filestr;
-		i = name.find_last_of("/");
-		if(i != string::npos) name = name.substr(i + 1, name.length() - i);
-		i = name.find_last_of(".");
-		if(i != string::npos) name = name.substr(0, i);
-	}
-
-	char line[10000];
-	string stmp, str1, str2;
-	int row = 0;
-	int columns = 1, rows = 1;
-	int column;
-	vector<string> header;
-	vector<MathStructure> vectors;
-	MathStructure mstruct = m_empty_matrix;
-	size_t is, is_n;
-	bool v_added = false;
-	while(fgets(line, 10000, file)) {
-		row++;
-		if(row >= first_row) {
-			stmp = line;
-			remove_blank_ends(stmp);
-			if(row == first_row) {
-				if(stmp.empty()) {
-					row--;
-				} else {
-					is = 0;
-					while((is_n = stmp.find(delimiter, is)) != string::npos) {
-						columns++;
-						if(headers) {
-							str1 = stmp.substr(is, is_n - is);
-							remove_blank_ends(str1);
-							header.push_back(str1);
-						}
-						if(!to_matrix) {
-							vectors.push_back(m_empty_vector);
-						}
-						is = is_n + delimiter.length();
-					}
-					if(headers) {
-						str1 = stmp.substr(is, stmp.length() - is);
-						remove_blank_ends(str1);
-						header.push_back(str1);
-					}
-					if(to_matrix) {
-						mstruct.resizeMatrix(1, columns, m_undefined);
-						if(mstruct.rows() < 1 || mstruct.columns() < (size_t) columns) return false;
-					} else {
-						vectors.push_back(m_empty_vector);
-					}
-				}
-			}
-			if((!headers || row > first_row) && !stmp.empty()) {
-				if(to_matrix && v_added) {
-					mstruct.addRow(m_undefined);
-					rows++;
-				}
-				is = 0;
-				column = 1;
-				while(column <= columns) {
-					is_n = stmp.find(delimiter, is);
-					if(is_n == string::npos) {
-						str1 = stmp.substr(is, stmp.length() - is);
-					} else {
-						str1 = stmp.substr(is, is_n - is);
-						is = is_n + delimiter.length();
-					}
-					if(to_matrix) {
-						parse(&mstruct[rows - 1][column - 1], str1);
-					} else {
-						vectors[column - 1].addChild(parse(str1));
-					}
-					column++;
-					if(is_n == string::npos) {
-						break;
-					}
-				}
-				for(; column <= columns; column++) {
-					if(!to_matrix) {
-						vectors[column - 1].addChild(m_undefined);
-					}
-				}
-				v_added = true;
-			}
-		}
-	}
-	if(to_matrix) {
-		addVariable(new KnownVariable(category, name, mstruct, title));
-	} else {
-		if(vectors.size() > 1) {
-			if(!category.empty()) {
-				category += "/";
-			}
-			category += name;
-		}
-		for(size_t i = 0; i < vectors.size(); i++) {
-			str1 = "";
-			str2 = "";
-			if(vectors.size() > 1) {
-				str1 += name;
-				str1 += "_";
-				if(title.empty()) {
-					str2 += name;
-					str2 += " ";
-				} else {
-					str2 += title;
-					str2 += " ";
-				}
-				if(i < header.size()) {
-					str1 += header[i];
-					str2 += header[i];
-				} else {
-					str1 += _("column");
-					str1 += "_";
-					str1 += i2s(i + 1);
-					str2 += _("Column ");
-					str2 += i2s(i + 1);
-				}
-				gsub(" ", "_", str1);
-			} else {
-				str1 = name;
-				str2 = title;
-				if(i < header.size()) {
-					str2 += " (";
-					str2 += header[i];
-					str2 += ")";
-				}
-			}
-			addVariable(new KnownVariable(category, str1, vectors[i], str2));
-		}
-	}
-	return true;
+	return false;
 }
 bool Calculator::exportCSV(const MathStructure &mstruct, const char *file_name, string delimiter) {
-	FILE *file = fopen(file_name, "w+");
-	if(file == NULL) {
-		return false;
-	}
-	MathStructure mcsv(mstruct);
-	PrintOptions po;
-	po.number_fraction_format = FRACTION_DECIMAL;
-	po.interval_display = INTERVAL_DISPLAY_SIGNIFICANT_DIGITS;
-	po.decimalpoint_sign = ".";
-	po.comma_sign = ",";
-	if(mcsv.isMatrix()) {
-		for(size_t i = 0; i < mcsv.size(); i++) {
-			for(size_t i2 = 0; i2 < mcsv[i].size(); i2++) {
-				if(i2 > 0) fputs(delimiter.c_str(), file);
-				mcsv[i][i2].format(po);
-				fputs(mcsv[i][i2].print(po).c_str(), file);
-			}
-			fputs("\n", file);
-		}
-	} else if(mcsv.isVector()) {
-		for(size_t i = 0; i < mcsv.size(); i++) {
-			mcsv[i].format(po);
-			fputs(mcsv[i].print(po).c_str(), file);
-			fputs("\n", file);
-		}
-	} else {
-		mcsv.format(po);
-		fputs(mcsv.print(po).c_str(), file);
-		fputs("\n", file);
-	}
-	fclose(file);
-	return true;
+	return false;
 }
